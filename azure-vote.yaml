apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: redis
        image: redis
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - port: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scc-backend-drt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scc-backend-drt
  template:
    metadata:
      labels:
        app: scc-backend-drt
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: scc-backend-drt
        image: tiagoduarte25/scc2223-app
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: redis
          value: "redis"
        - name: azure-managed-disk
          value: "/mnt/vol"
        volumeMounts:
          - mountPath: "/mnt/vol"
            name: mediavolume
      volumes:
      - name: mediavolume
        persistentVolumeClaim:
          claimName: azure-managed-disk
---
 apiVersion: v1
 kind: Service
 metadata:
  name: scc-backend-drt
 spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: scc-backend-drt
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: azurefile
  resources:
    requests:
      storage: 1Gi
